# -*- coding: utf-8 -*-
"""Rock Vs Mine Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jGNhJvmzUGV_fhcTLZB0kljAT3Al-B-y

**Rock Vs Mine Prediction**

Import Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection And Data Processing"""

#Loading the dataset through pandas dataframe..
sonar_data = pd.read_csv('/content/sonar data.csv', header =None)

# first 5 rows
sonar_data.head()

#no of rows and cols
sonar_data.shape

sonar_data.describe() #describe() ---> statistical measures of the data..

sonar_data[60].value_counts()   #value_count() ---> it is to know the how many values in that column..

"""M --> Mine
R --> Rock
"""

sonar_data.groupby(60).mean()

# Seperating the Data and Label
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X)
print(Y)

"""Training and Testing the Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

"""Model Training ---> Logistic Regression"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Model Evaluation"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data:', training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data:', test_data_accuracy)

"""Making Predictive System"""

input_data = (0.1313,0.2339,0.3059,0.4264,0.4010,0.1791,0.1853,0.0055,0.1929,0.2231,0.2907,0.2259,0.3136,0.3302,0.3660,0.3956,0.4386,0.4670,0.5255,0.3735,0.2243,0.1973,0.4337,0.6532,0.5070,0.2796,0.4163,0.5950,0.5242,0.4178,0.3714,0.2375,0.0863,0.1437,0.2896,0.4577,0.3725,0.3372,0.3803,0.4181,0.3603,0.2711,0.1653,0.1951,0.2811,0.2246,0.1921,0.1500,0.0665,0.0193,0.0156,0.0362,0.0210,0.0154,0.0180,0.0013,0.0106,0.0127,0.0178,0.0231)

# changing the input data into an Numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshaping the np array as we ae predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)

print(prediction)

if prediction[0] == 'R':
  print("The Object is a Rock")
else:
  print("The object is a Mine")